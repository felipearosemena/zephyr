/**
 *
 * Mixins
 *
 */

// Media Query Mixins
// Use to create a breakpoint, either using predefined breakpoint variables or arbitrary values
@mixin mq-min($bp-value) {
  @media only screen and (min-width: $bp-value) {
    @content;
  }
}

@mixin mq-max($bp-value) {
  @media only screen and (max-width: $bp-value - 1px) {
    @content;
  }
}

@mixin mq-between($min, $max) {
  @media only screen and (min-width: $min) and (max-width: $max - 1px) {
    @content;
  }
}

@mixin font-size($font-size, $line-height) {
  font-size: $font-size / $base-fs * 1rem;
  line-height: $line-height / $font-size;
}

// Mixin for .grid with percentage base gutters
// Need a formula to calculate a more accurate offset for the grid element
@mixin fluid-grid($gutter) {
  margin-left: -(0.01202 * $gutter * $gutter / 1% + 0.98955 * $gutter + 0.01483%);
}

@mixin clearfix() {
  zoom: 1;
  &:before, &:after {
    display: table;
    content: "";
  }

  &:after {
    clear: both;
  }
}

@mixin font-smoothing($value: on) {
  @if $value == on {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}

@mixin full-cover {
  left:0;
  top:0;
  width:100%;
  height:100%;
}

// Adds even padding and trims white space below last child
@mixin island($padding) {
  @include clearfix;
  padding: $padding;

  > :last-child {
    margin-bottom: 0;
  }
}

@mixin iconfont() {
  display: inline-block;
  vertical-align: middle;
  transition: color $transition-default;

  &:before, &:after {

    display: block;
    // Makes all icons even width,
    //prevents layout shifting when toggling icons
    width: 1em;
    vertical-align: middle;
    font-family: 'icons' !important;
    speak: none;
    font-style: normal;
    font-weight: normal;
    font-variant: normal;
    text-transform: none;
    text-align: center;
  }
}

@mixin button-plain($padding: 0) {
  border: none;
  background-color: transparent;
  padding: $padding;

  &:hover, &:focus, &:active {
    background: transparent;
  }
}

@mixin button-icon {
  @include iconfont;
  @include button-plain;
  position: absolute;
  z-index: 1;
  right: 0;
  top: 0;
  font-size: 0;
  padding: ($base-input-height - px-to-rem($base-fs))/2;
  transition: color $transition-default;

  &:hover {
    color: $color-primary;
  }

  &:before {
    font-size: px-to-rem($base-fs);
    height: px-to-rem($base-fs);
  }
}

@mixin input-icon {

  // Prevent the text from going behind the search icon
  padding-right: $base-input-height;
}

@function px-to-rem($px) {
  @return $px/$base-fs * 1rem;
}

@mixin list-plain {
  list-style: none;
  padding: 0;
  margin-bottom: 0;
}

@mixin slider-base {
  overflow: auto;
  white-space: nowrap;
  padding-left: 0;
  margin-bottom: 0;
}

@mixin slide-base {
  display: inline-block;
  vertical-align: middle;
  white-space: normal;
  width: 100%;
}

@mixin testimonial-quote {
  font-family: 'helvetica neue', 'helvetica', arial, sans-serif;
  font-size: 120px;
  display: block;
  line-height: 1;
  height: .4em;
  width: .4em;
  margin-left: auto;
  margin-right: auto;
  color: $color-primary;
}

@mixin logo-size($width) {
  width: $width;
  height: $width * $logo-ratio;
}


@mixin hover-underline-active($color: false) {
  &:after {
    transform: scaleX(1);
    transform-origin: 0 50%;

    @if $color {
      border-color: $color;
    }
  }
}

@mixin hover-underline-offset($padding-x: 0px) {
  &:after {
    width: calc(100% - #{$padding-x * 2});
    // The extra pixel is to prevent subpixel rendering sneaking in
    transform: scaleX(0);
  }
}

@mixin hover-underline($padding-x: 0px, $bottom: false) {
  position: relative;
  display: inline-block;
  vertical-align: baseline;

  &:after {
    content: '';
    display: block;
    position: absolute;
    border-top: 2px solid currentColor;
    margin-top: 0;
    transition: transform $transition-default;
    transform-origin: 100% 50%;

    @if ($bottom == true) {
      bottom: 0;
    }
  }

  @include hover-underline-offset($padding-x);

}

@mixin remove-underline {
  &:after {
    display: none;
  }
}

@mixin link-default {
  @include hover-underline;
  transition: color $transition-default, background $transition-default;

  &:hover,
  &:focus {
    @include hover-underline-active;
  }
}

@mixin path-animation($transition: $transition-default, $active-class: '.section.is-in', $delay-offset: 0) {

  path {
    opacity: 0;
    transform: scale(0);
    transform-origin: 50%;
    transition: all $transition-default;
  }

  #{$active-class} & path {
    opacity: 1;
    transform: scale(1);
    transition: all $transition;

    @for $i from 1 through 6 {
      &:nth-child(#{$i}) {
        transition-delay: ($i * 100 + $delay-offset) + ms;
      }
    }
  }

}

@mixin image-loaded($transition: opacity $transition-slow) {
  transition: $transition;

  &:not(.is-loaded) {
    opacity: 0;
  }
}


@mixin button-padding($height: $base-button-height, $lh: px-to-rem($btn-lh), $padding-x: $bsu*1.5) {
  padding: ($height - $lh)/2 $padding-x;
}
